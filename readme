1.    Create a Virtual Machine in the resource group along with virtual networks and subnets. Confirm the logins to the VM after deploying the infrastructure.
Here are the basic steps followed
1 Create an Azure Resource Manager template that defines the resources you want to deploy, such as the virtual machine, virtual network, and subnets.
2 Use the Azure CLI or Azure PowerShell to deploy the template to a resource group.
3 After the deployment is complete, you can use the Azure Portal or Azure CLI to verify that the virtual machine, virtual network, and subnets have been created successfully.
4 To confirm the logins to the VM after deploying the infrastructure, you can use the Azure Portal, Azure CLI, or Azure PowerShell to remotely connect to the virtual machine. Once connected, you can use the virtual machine's operating system to log in using the credentials provided during the deployment.


Create a resource group and a virtual network


Create the resource group
Creating a resource group with New-AzResourceGroup.CreateVNetQS-rg in the Eastus location
$rg = @{
    Name = 'CreateVNetQS-rg'
    Location = 'EastUS'
}
New-AzResourceGroup @rg


Create the virtual network
Create a virtual network with New-AzVirtualNetwork. virtual network named myVNet in the EastUS location:
$vnet = @{
    Name = 'myVNet'
    ResourceGroupName = 'CreateVNetQS-rg'
    Location = 'EastUS'
    AddressPrefix = '10.0.0.0/16'
}
$virtualNetwork = New-AzVirtualNetwork @vnet


Add a subnet
Azure deploys resources to a subnet within a virtual network, so you need to create a subnet. Create a subnet configuration named default with Add-AzVirtualNetworkSubnetConfig:
$subnet = @{
    Name = 'default'
    VirtualNetwork = $virtualNetwork
    AddressPrefix = '10.0.0.0/24'
}
$subnetConfig = Add-AzVirtualNetworkSubnetConfig @subnet


Associate the subnet to the virtual network
You can write the subnet configuration to the virtual network with Set-AzVirtualNetwork. This command creates the subnet:
$virtualNetwork | Set-AzVirtualNetwork


Create virtual machines
Creating two VMs in the virtual network.
Create the first VM
Create the first VM with New-AzVM. When you run the next command, you're prompted for credentials. Enter a username and password for the VM:
$vm1 = @{
    ResourceGroupName = 'CreateVNetQS-rg'
    Location = 'EastUS'
    Name = 'myVM1'
    VirtualNetworkName = 'myVNet'
    SubnetName = 'default'
}
New-AzVM @vm1 -AsJob


The -AsJob option creates the VM in the background. You can continue to the next step.
When Azure starts creating the VM in the background, you'll get something like this back:
Id     Name            PSJobTypeName   State         HasMoreData     Location             Command
--     ----            -------------   -----         -----------     --------             -------
1      Long Running... AzureLongRun... Running       True            localhost            New-AzVM
Create the second VM
Create the second VM with this command:
$vm2 = @{
    ResourceGroupName = 'CreateVNetQS-rg'
    Location = 'EastUS'
    Name = 'myVM2'
    VirtualNetworkName = 'myVNet'
    SubnetName = 'default'
}
New-AzVM @vm2


You'll have to create another user and password. Azure takes a few minutes to create the VM.
Connect to a VM from the internet
To get the public IP address of the VM, use Get-AzPublicIpAddress.
This example returns the public IP address of the myVM1 VM:
$ip = @{
    Name = 'myVM1'
    ResourceGroupName = 'CreateVNetQS-rg'
}
Get-AzPublicIpAddress @ip | select IpAddress


Open a command prompt on your local computer. Run the mstsc command. Replace <publicIpAddress> with the public IP address returned from the last step
mstsc /v:<publicIpAddress>
If prompted, select Connect.
Enter the user name and password you specified when creating the VM..
Select OK.
You may receive a certificate warning. If you do, select Yes or Continue.
Communicate between VMs
In the Remote Desktop of myVM1, open PowerShell.
Enter ping myVM2.
You'll get a reply message like this:
PS C:\Users\myVM1> ping myVM2

Pinging myVM2.ovvzzdcazhbu5iczfvonhg2zrb.bx.internal.cloudapp.net
Request timed out.
Request timed out.
Request timed out.
Request timed out.

Ping statistics for 10.0.0.5:
    Packets: Sent = 4, Received = 0, Lost = 4 (100% loss),
The ping fails, because it uses the Internet Control Message Protocol (ICMP). By default, ICMP isn't allowed through your Windows firewall.
To allow myVM2 to ping myVM1 in a later step, enter this command:
New-NetFirewallRule –DisplayName "Allow ICMPv4-In" –Protocol ICMPv4
That command lets ICMP inbound through the Windows firewall.
Close the remote desktop connection to myVM1.
Repeat the steps in Connect to a VM from the internet. This time, connect to myVM2.
From a command prompt on the myVM2 VM, enter ping myVM1.
You'll get a reply message like this:
C:\windows\system32>ping myVM1

Pinging myVM1.e5p2dibbrqtejhq04lqrusvd4g.bx.internal.cloudapp.net [10.0.0.4] with 32 bytes of data:
Reply from 10.0.0.4: bytes=32 time=2ms TTL=128
Reply from 10.0.0.4: bytes=32 time<1ms TTL=128
Reply from 10.0.0.4: bytes=32 time<1ms TTL=128
Reply from 10.0.0.4: bytes=32 time<1ms TTL=128

Ping statistics for 10.0.0.4:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 2ms, Average = 0ms
You receive replies from myVM1 because you allowed ICMP through the Windows firewall on the myVM1 VM in a previous step.
Close the remote desktop connection to myVM2.
